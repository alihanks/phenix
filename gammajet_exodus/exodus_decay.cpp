//-----------------------------------------------------------------------------
//
//  Decay machine of the EXODUS package
//
//  Main program
//
//-----------------------------------------------------------------------------

#include <stdlib.h>

#include <TROOT.h>
#include <TNtuple.h>

#include "Momentum.h"
#include "Particle.h"
#include "ParticleList.h"
#include "ParticlePropertyList.h"
#include "DecayList.h"

TROOT exodus("exodus","Initialize ROOT for exodus");
#define  INCLUDEFLAG
#include "DeclareROOTObjects.h"

ifstream     * OpenInputFile(char *);
void           CloseInputFile(ifstream *);
ofstream     * OpenOutputFile(char *);
void           CloseOutputFile(ofstream *);
ofstream     * OpenFullEventFile(char *);
void           CloseFullEventFile(ofstream *);
TFile        * OpenROOTFile(char *);
TFile        * CloseROOTFile(TFile *);
void           BookROOTObjects();
ParticleList * GetEventFromInputStream(ifstream *);
ParticleList * GetPYTHIAEventFromInputStream(ifstream *, int);
void           WriteEventToOutputStream(ofstream *, ParticleList *);
ParticleList * DoAllDecays(ParticleList *, ParticlePropertyList *,
			   DecayList *);
ParticleList * AdjustDecaySum(ParticleList *, DecayList *);
ParticlePropertyList * DefineParticleProperties(void);
DecayList            * DefineDecayProperties(ParticlePropertyList *);
void FillROOTObjects(int, double, double, char *, 
		     ParticleList *,ParticlePropertyList *);
void WriteFullEventFile(ofstream *, int, ParticleList *, 
			ParticlePropertyList *);
void InitializeRandom();
void CleanupRandom();

int main()
{
  ifstream     * input_stream = 0;
  ofstream     * output_stream = 0;
  ParticleList * OneEvent = 0; 
  int            setup, generator, asciiformat;
  char           input_file[100], output_file[100], ascii_output_file[100];
  int            itotal;
  double         dNdy_pi0 = 1.;
  double         N_coll = 1.;
  bool           file_end = false;
  TFile        * root_file = 0;

  cout << endl << endl;
  cout << "**********************************" << endl;
  cout << "*                                *" << endl;
  cout << "*  W E L C O M E to E X O D U S  *" << endl;
  cout << "*                                *" << endl;
  cout << "*         DECAY  MACHINE         *" << endl;
  cout << "*                                *" << endl;
  cout << "*                                *" << endl;
  cout << "*    Wir kriegen alles klein!    *" << endl;
  cout << "*                                *" << endl;
  cout << "**********************************" << endl;
  cout << endl << endl;

  do
  {
    cout << "Choose one of the predefined setups:" << endl;
    cout << "------------------------------------" << endl;
    cout << endl;
    cout << "1) CERES" << endl;
    cout << "2) ISR" << endl;
    cout << "3) PHENIX" << endl;
    cout << "4) Phi->KK" << endl;
    cout << endl;
    cout << "Your choice (1-4): "; 
    cin  >> setup; 
    cout << endl;
  } while ( setup<1 || setup>4 );

  do
  {
    cout << "Input file was generated by:" << endl;
    cout << "----------------------------" << endl;
    cout << endl;
    cout << "1) EXODUS" << endl;
    cout << "2) PYTHIA single leptons" << endl;
    cout << "3) PYTHIA lepton pairs" << endl;
    cout << endl;
    cout << "Your choice (1-3): "; 
    cin  >> generator; 
    cout << endl;
  } while ( generator<1 || generator>3 );

  cout << endl;
  cout << "Input file containing first generation particle list: ";
  cin >> input_file;
  cout << endl;
  cout << "Output file containing ROOT objects: ";
  cin >> output_file;
  cout << endl;

  do
  {
    cout << "ASCII output:" << endl;
    cout << "-------------" << endl;
    cout << endl;
    cout << "1) EXODUS format" << endl;
    cout << "2) OSCAR format" << endl;
    cout << endl;
    cout << "Your choice (1-2): "; 
    cin  >> asciiformat; 
    cout << endl;
    cout << "Output file containing ASCII information: ";
    cin >> ascii_output_file;
    cout << endl;
  } while ( asciiformat<1 || asciiformat>3 );

  root_file = OpenROOTFile(output_file);
  BookROOTObjects();
  InitializeRandom();

  ParticlePropertyList * Species = DefineParticleProperties();
  DecayList            * Decays  = DefineDecayProperties(Species);
  if ( Decays==0 ) return 0;
  
  input_stream = OpenInputFile(input_file);
  if ( asciiformat==1 )
  {
    output_stream = OpenOutputFile(ascii_output_file);
  }
  if ( asciiformat==2 )
  {
    output_stream = OpenFullEventFile(ascii_output_file);
  }

  itotal = 0;

  do
  {
    if ( generator==1 )
      OneEvent = GetEventFromInputStream(input_stream);
    if ( generator>=2 )
      OneEvent = GetPYTHIAEventFromInputStream(input_stream,generator);
    if ( OneEvent )
    {
      itotal++;
      //if ( fmod((double)itotal,10000.0)==0.0 )
      if ( itotal%10000==0.0 )
        cout << itotal << " primary particles done" << endl;
      OneEvent = AdjustDecaySum(OneEvent,Decays);
      OneEvent = DoAllDecays(OneEvent,Species,Decays);
      FillROOTObjects(setup,dNdy_pi0,N_coll,output_file,
		      OneEvent,Species);
      /*
      if ( asciiformat==1 )
      {
        WriteEventToOutputStream(output_stream,OneEvent);
      }
      if ( asciiformat==2 )
      {
        WriteFullEventFile(output_stream,itotal,OneEvent,Species);
      }
      */
    }
    if ( OneEvent==0 ) file_end=true;
    delete OneEvent;
    OneEvent = 0;
  }  
  while ( !file_end );

  CloseInputFile(input_stream);
  if ( asciiformat==1 )
  {
    CloseOutputFile(output_stream);
  }
  if ( asciiformat==2 )
  {
    CloseFullEventFile(output_stream);
  }
  root_file = CloseROOTFile(root_file);
  CleanupRandom();

  return 0;
}

  







